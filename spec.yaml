swagger: '2.0'
info:
  description: This is a BotX API
  version: 1.0.0
  title: BotX.pro | API Documentation
  # put the contact info for your development or API team
  contact:
    email: dev@botx.pro

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

  # x-logo:
  #   url: logo.png
  #   backgroundColor: "#263238"

# tags are used for organizing operations
tags:
- name: market
  description: Market project types
- name: individual
  description: Virtual steam bot

paths:

  /market/items:
    get:
      tags:
        - market
      summary: List of all market items
      operationId: getMarketItems
      description: |
        List of all market items
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                type: object
              items:
                type: array
                items:
                  $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

  /market/deposit:
    post:
      tags:
        - market
      summary: Deposit
      operationId: deposit
      description: |
        Deposit
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            deposit:
              type: object
              required: 
              - uid
              - token
              - message
              properties:
                uid: 
                  type: string
                  example: "76561118123456789"  
                token: 
                  type: string
                  example: "bT7eJeTC"
                message: 
                  type: string
                  example: "hello, my dear friend!"
                their_items:
                  type: array
                  items: 
                    $ref: '#/definitions/SteamifiedItem'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /market/withdraw:
    post:
      tags:
        - market
      summary: Withdraw
      operationId: withdraw
      description: |
        Withdraw
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            withdraw:
              type: object
              required: 
              - uid
              - token
              - message
              properties:
                uid: 
                  type: string
                  example: "76561118123456789"  
                token: 
                  type: string
                  example: "bT7eJeTC"
                message: 
                  type: string
                  example: "hello, my dear friend!"
                my_items:
                  type: array
                  items: 
                    $ref: '#/definitions/SteamifiedItem'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /market/inventories:
    get:
      tags:
        - market
      summary: Get user inventory
      operationId: getUserInventoryMarket
      description: |
        Get user inventory
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: uid
        description: steam id
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

#############################################

  /individual/tradeoffers:
    get:
      tags:
        - individual
      summary: List of all tradeoffers
      operationId: getTradeoffers
      description: |
        Get all project tradeoffers
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                type: object
              tradeoffers:
                type: array
                items:
                  $ref: '#/definitions/TradeOffer'
        400:
          description: bad input parameter

    post:
      tags:
        - individual
      summary: Send TradeOffer
      operationId: sendTradeoffer
      description: |
        Send TradeOffer
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            tradeoffer:
              $ref: '#/definitions/TradeOfferToSend'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /individual/tradeoffers/{tradeoffer_id}:
    get:
      tags:
        - individual
      summary: Get tradeoffer by id
      operationId: getTradeoffer
      description: |
        Get tradeoffer by id
      parameters:
      - in: path
        name: tradeoffer_id
        description: tradeoffer id
        required: true
        type: integer
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/TradeOffer'
        400:
          description: bad input parameter

  /individual/inventories:
    get:
      tags:
        - individual
      summary: Get user inventory
      operationId: getUserInventoryIndividual
      description: |
        Get user inventory
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: uid
        description: steam id
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

  /individual/items:
    get:
      tags:
        - individual
      summary: List of all individual items
      operationId: getMarketItems
      description: |
        List of all individual items
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: page
        description: page
        required: false
        type: integer
      - in: query
        name: per_page
        description: items per page
        required: false
        type: integer
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                type: object
              items:
                type: array
                items:
                  $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter


##############################################

definitions:
  TradeOffer:
    type: object
    description: (optional)
    properties:
      offer_id: 
        type: string
        example: "2340564619"
      is_our_offer: 
        type: boolean
        example: true
      partner: 
        type: string
        example: "76561198078016715"
      message: 
        type: string
        example: "privet"
      state: 
        type: integer
        example: 2
      state_name: 
        type: string
        example: "Active"
      expires: 
        type: string
        example: "2017-08-10"
      bot_id: 
        type: string
        example: "76561198350509648"
      oncancel_state: 
        type: string
        example: "canceled"
      oncomplete_state: 
        type: string
        example: "available"
      created_at: 
        type: string
        example: "2017-07-27T15:22:40.265+00:00"
      updated_at: 
        type: string
        example: "2017-07-27T15:22:40.268+00:00"
      items_to_receive:
        type: array
        items: 
          $ref: '#/definitions/SteamItem'
      items_to_give:
        type: array
        items:
          $ref: '#/definitions/SteamItem'

  TradeOfferToSend: 
    type: object
    required: 
    - uid
    - token
    - message
    properties:
      uid: 
        type: string
        example: "76561118123456789"  
      token: 
        type: string
        example: "bT7eJeTC"
      message: 
        type: string
        example: "hello, my dear friend!"
      their_items:
        type: array
        items: 
          $ref: '#/definitions/SteamifiedItem'
      my_items:
        type: array
        items: 
          $ref: '#/definitions/SteamifiedItem'
  Transaction:
    type: object
    properties:
      id:
        type: integer
        example: 12
      state:
        type: string
        example: "pending"
        description: also can be "completed" or "failed"
      amount: 
        type: string
        example: "5.35"
        description: based on our items' prices
      steam_amount: 
        type: string
        example: "6.35"
        description: based on steam items' prices
      fee_percent:
        type: integer
        example: 0
      fee_amount:
        type: string
        example: "0.00"
      description: 
        type: string
        example: "transaction description here"
      type:
        type: string
        example: "send_offer" 
      tradeoffer:
        $ref: '#/definitions/TradeOffer'  
      details: 
        type: object
        properties:
          items_to_receive:
            type: array
            items: 
              $ref: '#/definitions/SteamItem'
          items_to_give:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        description: (optional)
  SteamifiedItem:
    type: object
    required: 
    - assetid
    - contexid
    - appid
    properties:
      assetid:
        type: string
        example: "11123456789"
      contexid:
        type: integer
        example: 2
      appid:
        type: integer
        example: 730

  SteamItem:          #steam_item
    type: object
    properties:
      assetid:
        type: string
        example: "11123456789"
      instanceid:
        type: string
        example: "11123456789"
      contextid:
        type: string
        example: "11123456789"
      contexid:
        type: integer
        example: 2
      appid:
        type: integer
        example: 730
      market_hash_name:
        type: string
        example: "MAG-7 | Heaven Guard (Minimal Wear)"
      name:
        type: string
        example: "MAG-7 | Heaven Guard"
      name_color:
        type: string
        example: "D2D2D2"
      background_color:
        type: string
        example: ""
      type:
        type: string
        example: "Mil-Spec Grade Shotgun"
      marketable:
        type: boolean
        example: true
      tradable:
        type: boolean
        example: true
      description:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              example: "html"
            value:
              type: string
              example: "Exterior: Minimal Wear"
      tags:
        type: array
        items:
          type: object
          properties:
            internal_name:
              type: string
              example: "CSGO_Type_Shotgun"
            name:
              type: string
              example: "Shotgun"
            category:
              type: string
              example: "Type"
            category_name:
              type: string
              example: "Type"
            color:
              type: string
              example: ""
      prices:
        type: object
        properties:
          our_price:
            type: string
            example: "0.07"
          steam_price:
            type: string
            example: "0.10"
          state:
            type: string
            example: "available"
          last_updated:
            type: string
            example: "2017-07-18"




# Added by API Auto Mocking Plugin
host: api.botx.pro
basePath: /v1/remote
schemes:
 - https
 # - http