swagger: '2.0'
info:
  version: 1.0.0
  title: BotX.pro | API Documentation
  # put the contact info for your development or API team
  contact:
    email: dev@botx.pro

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    # Item signature
    
    Item signature is a SHA256-hash that consists of:
      - appid
      - contextid
      - assetid
      - our_price
      - steam_price
      - salt (project api key)

    Example: SHA256 {730}{2}{1231232}{0.12}{0.17}{odfkaposmlkdasld}
    
    # Transaction signature
    
    Item signature is a SHA256-hash that consists of:
      - transaction id
      - project id
      - transaction type
      - amount
      - steam amount
      - transaction state
      - project api key

    Example: SHA256 {3245}{7}{deposit}{0.12}{0.17}{completed}{odfkaposmlkdasld}

    # Identifying Steam Items

    Sometimes it can be a little confusing to identify a specific item in the Steam economy. There are several different types of IDs present in one particular item, and a lot of vague terminology. This guide aims to clear all that up for you.

    For starters, the "official" term for a Steam item is an asset. When I say a "Steam item", I mean a particular copy of an item. I'm not referring to the item's definition, name, image, or anything. I'm referring to a specific, unique copy of the item.

    In a general sense, every item on Steam must be owned by an app. An "app" is a game, software, or whatever on Steam. Every app has its own unique AppID. You can find a particular game's AppID by going to its store page or community hub and looking at the URL. For example, TF2's AppID is 440 so TF2's store page can be found at http://store.steampowered.com/app/440. CS:GO's is 730, Dota 2's is 570, and so on. Note that Steam Community items, Steam gifts, and other "Steam" items are owned by the "Steam" app, which has AppID 753. To identify an item, you'll need the AppID of the game which owns it.

    Of course, the AppID alone isn't enough. You also need two other IDs. Have you ever noticed how some games have multiple inventories, which appear in a drop-down list? An example is the Steam inventory, which has sub-inventories for "Community", "Gifts", "Coupons", etc. These "sub-inventories" are called contexts, and each context has its own context ID. If a game doesn't have a drop-down menu to select a context, that doesn't mean that it's without contexts. That only means that it has one single visible context. That single context still has an ID. For all current Valve games, the context ID for the publicly-visible context is 2.

    Context IDs can be a bit tricky. It's entirely up to the game's developer to determine how they work. For example, Valve games take the "single shared inventory" model in which there's one context ID which is shared by everyone. Under this model, an item belongs to one particular context and never leaves that context. Consequently, the item's context ID never changes. It is, however, possible for game developers to create contexts in any way they choose. For example, Spiral Knights uses the "per-character inventory" model in which everyone who plays the game has their own context IDs for their characters. Creating a new character creates a new context ID. This means that when an item is traded between users, its context ID will change as it moved out of a particular character's inventory.

    Those are the two different types of "containers" in the Steam economy. Apps own contexts, and contexts own assets. Every asset on Steam has, in addition to its AppID and context ID, an asset ID which is guaranteed to be unique inside of a given AppID+ContextID combination. Notice that this means that asset IDs are not unique across all of Steam. They aren't even unique across a particular app. They are only unique inside of a given context. For example, there could be two items with asset ID 1 in the same game, as long as they have different context IDs. An item's asset ID may be referred to as "assetid" or just plain "id".

    Context IDs and asset IDs are assigned by the game developer and can follow any pattern. They can change when traded or not. They may both be up to 64 bits in size. Consequently, Steam returns them (like all other 64-bit values) in JSON as strings.

    Still following? All of what we've learned so far leads us to this conclusion: in order to uniquely identify an item, you need its AppID, its context ID, and its asset ID. Once you have these three things, only then can you uniquely identify it. In fact, this is how you link to a particular item in a user's inventory: steamcommunity.com/profiles/steamid/inventory#appid_contextid_assetid. Here's an example: https://steamcommuni...440_2_134161610

  x-logo:
    url: botx.png
    # backgroundColor: "#fff"

# tags are used for organizing operations
tags:
- name: market
  description: Market project types
- name: individual
  description: Virtual steam bot

paths:

  /market/items:
    get:
      tags:
        - market
      summary: List of all market items
      operationId: getMarketItems
      description: |
        List of all market items
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                $ref: "#/definitions/Meta"
              items:
                type: array
                items:
                  $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

  /market/deposit:
    post:
      tags:
        - market
      summary: Deposit
      operationId: deposit
      description: |
        Deposit
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            deposit:
              type: object
              required: 
              - uid
              - token
              - message
              properties:
                uid: 
                  type: string
                  example: "76561118123456789"  
                token: 
                  type: string
                  example: "bT7eJeTC"
                message: 
                  type: string
                  example: "hello, my dear friend!"
                their_items:
                  type: array
                  items: 
                    $ref: '#/definitions/SteamifiedItem'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /market/withdraw:
    post:
      tags:
        - market
      summary: Withdraw
      operationId: withdraw
      description: |
        Withdraw
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            withdraw:
              type: object
              required: 
              - uid
              - token
              - message
              properties:
                uid: 
                  type: string
                  example: "76561118123456789"  
                token: 
                  type: string
                  example: "bT7eJeTC"
                message: 
                  type: string
                  example: "hello, my dear friend!"
                my_items:
                  type: array
                  items: 
                    $ref: '#/definitions/SteamifiedItem'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /market/inventories:
    get:
      tags:
        - market
      summary: Get user inventory
      operationId: getUserInventoryMarket
      description: |
        Get user inventory
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: uid
        description: steam id
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

#############################################

  /individual/items:
    get:
      tags:
        - individual
      summary: List of all individual items
      operationId: getIndividualItems
      description: |
        List of all individual items
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: page
        description: page
        required: false
        type: integer
      - in: query
        name: per_page
        description: items per page
        required: false
        type: integer
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                $ref: "#/definitions/Meta"
              items:
                type: array
                items:
                  $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

  /individual/tradeoffers:
    get:
      tags:
        - individual
      summary: List of all tradeoffers
      operationId: getTradeoffers
      description: |
        Get all project tradeoffers
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: object
            properties: 
              meta:
                $ref: "#/definitions/Meta"
              tradeoffers:
                type: array
                items:
                  $ref: '#/definitions/TradeOffer'
        400:
          description: bad input parameter

    post:
      tags:
        - individual
      summary: Send TradeOffer
      operationId: sendTradeoffer
      description: |
        Send TradeOffer
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties: 
            api_key: 
              type: string
              example: "dknsAKJNKDNASKDNksNDskdNSDKNKJNDkNASDKJnskjDNKSADNsjd"
            project_id: 
              type: integer
              example: 12
            tradeoffer:
              $ref: '#/definitions/TradeOfferToSend'
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/Transaction'
        400:
          description: bad input parameter

  /individual/tradeoffers/{tradeoffer_id}:
    get:
      tags:
        - individual
      summary: Get tradeoffer by id
      operationId: getTradeoffer
      description: |
        Get tradeoffer by id
      parameters:
      - in: path
        name: tradeoffer_id
        description: tradeoffer id
        required: true
        type: integer
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            $ref: '#/definitions/TradeOffer'
        400:
          description: bad input parameter

  /individual/inventories:
    get:
      tags:
        - individual
      summary: Get user inventory
      operationId: getUserInventoryIndividual
      description: |
        Get user inventory
      parameters:
      - in: query
        name: project_id
        description: project id
        required: true
        type: integer
      - in: query
        name: api_key
        description: api key
        required: true
        type: string
      - in: query
        name: uid
        description: steam id
        required: true
        type: string
      responses:
        200:
          description: success response
          schema:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        400:
          description: bad input parameter

  


##############################################

definitions:
  AuthParams:
    type: object
    properties:
      api_key:
        type: string
        example: "adasdpaokdpaokd"
      project_id:
        type: integer
        example: 12

  MetaParams:
    type: object
    properties:
      page: 
        type: integer
        example: 2
      per_page:
        type: integer
        example: 50

  Meta:
    type: object
    required: 
      - total
      - total_pages
      - page
    properties:
      total:
        type: integer
        example: 100
      total_pages:
        type: integer
        example: 4
      page:
        type: integer
        example: 1

  TradeOffer:
    type: object
    description: (optional)
    properties:
      offer_id: 
        type: string
        example: "2340564619"
      is_our_offer: 
        type: boolean
        example: true
      partner: 
        type: string
        example: "76561198078016715"
      message: 
        type: string
        example: "privet"
      state: 
        type: integer
        example: 2
      state_name: 
        type: string
        example: "Active"
      expires: 
        type: string
        example: "2017-08-10"
      bot_id: 
        type: string
        example: "76561198350509648"
      oncancel_state: 
        type: string
        example: "canceled"
      oncomplete_state: 
        type: string
        example: "available"
      created_at: 
        type: string
        example: "2017-07-27T15:22:40.265+00:00"
      updated_at: 
        type: string
        example: "2017-07-27T15:22:40.268+00:00"
      items_to_receive:
        type: array
        items: 
          $ref: '#/definitions/SteamItem'
      items_to_give:
        type: array
        items:
          $ref: '#/definitions/SteamItem'

  TradeOfferToSend: 
    type: object
    required: 
    - uid
    - token
    - message
    properties:
      uid: 
        type: string
        example: "76561118123456789"  
      token: 
        type: string
        example: "bT7eJeTC"
      message: 
        type: string
        example: "hello, my dear friend!"
      their_items:
        type: array
        items: 
          $ref: '#/definitions/SteamifiedItem'
      my_items:
        type: array
        items: 
          $ref: '#/definitions/SteamifiedItem'

  Transaction:
    type: object
    properties:
      id:
        type: integer
        example: 12
      state:
        type: string
        example: "pending"
        description: also can be "completed" or "failed"
      amount: 
        type: string
        example: "5.35"
        description: based on our items' prices
      steam_amount: 
        type: string
        example: "6.35"
        description: based on steam items' prices
      fee_percent:
        type: integer
        example: 0
      fee_amount:
        type: string
        example: "0.00"
      description: 
        type: string
        example: "transaction description here"
      type:
        type: string
        example: "send_offer" 
      tradeoffer:
        $ref: '#/definitions/TradeOffer'  
      details: 
        type: object
        properties:
          items_to_receive:
            type: array
            items: 
              $ref: '#/definitions/SteamItem'
          items_to_give:
            type: array
            items:
              $ref: '#/definitions/SteamItem'
        description: (optional)
      hash:
        type: string
        example: "f990af75283f6917c0d88d89fc506b01cd91fab57e517b6f560cec49ad8b381f"
        description: |
          [Transaction signature](#section/Transaciton-signature)

  SteamifiedItem:
    type: object
    required: 
    - assetid
    - contextid
    - appid
    properties:
      assetid:
        type: string
        example: "11123456789"
        description: |
          It's unique identificator of item for the current appid and contextid
      contextid:
        type: integer
        example: 2
        description: |
          It's a context id of item
      appid:
        type: integer
        example: 730
        description: |
          Every item on Steam must be owned by an app.
          Every app has its own unique AppID.
          You can find a particular game's AppID by going to its store page or community hub and looking at the URL.
          For example, TF2's AppID is 440 so TF2's store page can be found at http://store.steampowered.com/app/440.
          CS:GO's is 730, Dota 2's is 570, and so on.

  SteamItem:
    type: object
    allOf:
    - $ref: "#/definitions/SteamifiedItem"
    - type: object
      properties:
        instanceid:
          type: string
          example: "11123456789"
        market_hash_name:
          type: string
          example: "MAG-7 | Heaven Guard (Minimal Wear)"
        name:
          type: string
          example: "MAG-7 | Heaven Guard"
        name_color:
          type: string
          example: "D2D2D2"
        background_color:
          type: string
          example: ""
        type:
          type: string
          example: "Mil-Spec Grade Shotgun"
        marketable:
          type: boolean
          example: true
        tradable:
          type: boolean
          example: true
        description:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "html"
              value:
                type: string
                example: "Exterior: Minimal Wear"
        tags:
          type: array
          items:
            type: object
            properties:
              internal_name:
                type: string
                example: "CSGO_Type_Shotgun"
              name:
                type: string
                example: "Shotgun"
              category:
                type: string
                example: "Type"
              category_name:
                type: string
                example: "Type"
              color:
                type: string
                example: ""
        prices:
          type: object
          properties:
            our_price:
              type: string
              example: "0.07"
              description:
                Item price equivalent in USD (real price)
            steam_price:
              type: string
              example: "0.10"
              description:
                Item price in Steam Community Market ([SteamAnalyst.com](https://steamanalyst.com))
            state:
              type: string
              example: "available"
              enum:
                - available
                - banned
              description: |
                BotX analyze all prices in the Steam Community Market and ban every item with unstable price
            reason:
              type: string
              example: "errors.deposit_limitation"
              enum:
                - errors.deposit_limitation
                - errors.withdraw_limitation
              description: |
                Reason why we ban this item with our BotX analyst system
            last_updated:
              type: string
              example: "2017-07-18"
        hash:
          type: string
          example: "f990af75283f6917c0d88d89fc506b01cd91fab57e517b6f560cec49ad8b381f"
          description: |
            [Item signature](#section/Item-signature)

#####################################################



# Added by API Auto Mocking Plugin
host: api.botx.pro
basePath: /v1/remote
schemes:
 - https
 # - http